{{- $HTTPS := .Values.proxy.https.enabled -}}
{{- $autoHTTPS := and $HTTPS (and (eq .Values.proxy.https.type "letsencrypt") .Values.proxy.https.hosts) -}}
{{- $offloadHTTPS := and $HTTPS (eq .Values.proxy.https.type "offload") -}}
{{- $manualHTTPS := and $HTTPS (eq .Values.proxy.https.type "manual") -}}
{{- $manualHTTPSwithsecret := and $HTTPS (eq .Values.proxy.https.type "secret") -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    {{- include "jupyterhub.labels" . | nindent 4 }}
spec:
  replicas: {{ .Values.proxy.traefik.replicas | default 1 }}
  selector:
    matchLabels:
      {{- include "jupyterhub.matchLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
        {{- /* Changes here will cause the Deployment to restart the pods. */}}
        {{- include "jupyterhub.matchLabels" . | nindent 8 }}
        hub.jupyter.org/network-access-etcd: "true"
        hub.jupyter.org/network-access-hub: "true"
        hub.jupyter.org/network-access-singleuser: "true"
        {{- if .Values.proxy.labels }}
        {{- .Values.proxy.labels | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
      annotations:
        checksum/config-map: {{ include (print .Template.BasePath "/proxy/configmap.yaml") . | sha256sum }}
        # This lets us autorestart when the secret changes!
        checksum/hub-secret: {{ include (print $.Template.BasePath "/hub/secret.yaml") . | sha256sum }}
        checksum/proxy-secret: {{ include (print $.Template.BasePath "/proxy/secret.yaml") . | sha256sum }}
        {{- if .Values.proxy.annotations }}
        {{- .Values.proxy.annotations | toYaml | trimSuffix "\n" | nindent 8 }}
        {{- end }}
    spec:
      terminationGracePeriodSeconds: 60
      {{- if .Values.scheduling.podPriority.enabled }}
      priorityClassName: {{ .Release.Name }}-default-priority
      {{- end }}
      nodeSelector: {{ toJson .Values.proxy.nodeSelector }}
      {{- include "jupyterhub.coreAffinity" . | nindent 6 }}
      volumes:
        - name: config
          configMap:
            name: proxy-traefik-config
        - name: htpasswd
          emptyDir: {}
      {{- if $manualHTTPS }}
        - name: tls-secret
          secret:
            secretName: proxy-manual-tls
      {{- else if $manualHTTPSwithsecret }}
        - name: tls-secret
          secret:
            secretName: {{ .Values.proxy.https.secret.name }}
      {{- else if $autoHTTPS }}
        - name: acme
          emptyDir: {}
      {{- end }}
      initContainers:
        - name: htpasswd
          image: {{ .Values.proxy.htpasswd.image.name }}:{{ .Values.proxy.htpasswd.image.tag }}
          args:
            - htpasswd
            - -bc
            - /htpasswd/htpasswd
            - api_admin
            - $PROXY_PASSWORD
          env:
            - name: PROXY_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: hub-secret
                  key: proxy.token
          volumeMounts:
            - mountPath: /htpasswd
              name: htpasswd
        - name: storeconfig
          image: {{ .Values.proxy.traefik.image.name }}:{{ .Values.proxy.traefik.image.tag }}
          args:
            - storeconfig
            - --debug
            - --configfile=/config/traefik.toml
            - --etcd.endpoint=$(HUB_ETCD_SERVICE_HOST):$(HUB_ETCD_SERVICE_PORT)
          volumeMounts:
            - mountPath: /config
              name: config
            {{- if (or $manualHTTPS $manualHTTPSwithsecret) }}
            - mountPath: /ssl
              name: tls-secret
              readOnly: true
            {{- end }}
            {{- if $autoHTTPS }}
            - mountPath: /acme
              name: acme
            {{- end }}
      containers:
        - name: traefik
          image: {{ .Values.proxy.traefik.image.name }}:{{ .Values.proxy.traefik.image.tag }}
          readinessProbe:
            tcpSocket:
              port: 80
            failureThreshold: 1
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          livenessProbe:
            tcpSocket:
              port: 80
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 2
          args:
            - --debug
            - --configfile=/config/traefik.toml
            - --etcd.endpoint=$(HUB_ETCD_SERVICE_HOST):$(HUB_ETCD_SERVICE_PORT)
            {{- range .Values.proxy.traefik.extraArgs }}
            - {{ . }}
            {{- end }}
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /htpasswd
              name: htpasswd
            {{- if or $manualHTTPS $manualHTTPSwithsecret }}
            - mountPath: /ssl
              name: tls-secret
              readOnly: true
            {{- end }}
            {{- if $autoHTTPS }}
            - mountPath: /acme
              name: acme
            {{- end }}
          resources:
            {{- .Values.proxy.traefik.resources | toYaml | trimSuffix "\n" | nindent 12 }}
          {{- with .Values.proxy.traefik.image.pullPolicy }}
          imagePullPolicy: {{ . }}
          {{- end }}
          ports:
            - containerPort: 443
              name: proxy-https
            - containerPort: 80
              name: proxy-http
            - containerPort: 8001
              name: api
          livenessProbe:
            httpGet:
              path: /_chp_healthz
              port: proxy-http
          readinessProbe:
            httpGet:
              path: /_chp_healthz
              port: proxy-http
        {{- if $autoHTTPS }}
        - name: storeconfig-job
          image: "{{ .Values.proxy.traefik.image.name }}:{{ .Values.proxy.traefik.image.tag }}"
          command:
            - sh
            - -c
            - >
              while true; do
                /traefik storeconfig --configfile=/config/traefik.toml;
                sleep 10;
              done
          volumeMounts:
            - mountPath: /etc/traefik
              name: config
            - mountPath: /acme
              name: acme
        {{- end }}
